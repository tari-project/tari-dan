# NOTE: When editing this version, also edit the versions in template_built_in/templates/account and account_nft
[workspace.package]
version = "0.5.3"
edition = "2021"
authors = ["The Tari Development Community"]
repository = "https://github.com/tari-project/tari-dan"
license = "BSD-3-Clause"


[workspace]
members = [
    "applications/tari_dan_app_utilities",
    "applications/tari_dan_wallet_cli",
    "applications/tari_dan_wallet_daemon",
    "applications/tari_generate",
    "applications/tari_indexer",
    "applications/tari_scaffolder",
    "applications/tari_signaling_server",
    "applications/tari_swarm_daemon",
    "applications/tari_validator_node_cli",
    "applications/tari_validator_node",
    "clients/base_node_client",
    "clients/validator_node_client",
    "clients/wallet_daemon_client",
    "dan_layer/consensus",
    "dan_layer/consensus_tests",
    "dan_layer/epoch_manager",
    "dan_layer/indexer_lib",
    "dan_layer/p2p",
    "dan_layer/rpc_state_sync",
    "dan_layer/state_store_sqlite",
    "dan_layer/state_tree",
    "dan_layer/storage_lmdb",
    "dan_layer/storage_sqlite",
    "dan_layer/storage",
    "dan_layer/tari_bor",
    "dan_layer/template_abi",
    "dan_layer/template_builtin",
    "dan_layer/template_lib",
    "dan_layer/template_macros",
    "dan_layer/template_test_tooling",
    "dan_layer/transaction_manifest",
    "dan_layer/transaction",
    "dan_layer/validator_node_rpc",
    "dan_layer/wallet/crypto",
    "dan_layer/wallet/sdk",
    "dan_layer/wallet/storage_sqlite",
    "integration_tests",
    "networking/core",
    "networking/swarm",
    "networking/rpc_framework",
    "networking/rpc_macros",
    "networking/libp2p-peersync",
    "networking/libp2p-substream",
    "networking/sqlite_message_logger",
    "utilities/tariswap_test_bench",
    "utilities/transaction_submitter",
    "utilities/transaction_submitter",
    "utilities/generate_ristretto_value_lookup",
]
resolver = "2"

[workspace.dependencies]
# version numbers are required for deploying to crates.io. Hopefully we can work out a way of
# specifying them in a single place and having them applied to all crates

# internal dependencies among workspace crates
libp2p-messaging = { path = "networking/libp2p-messaging" }
libp2p-peersync = { path = "networking/libp2p-peersync" }
libp2p-substream = { path = "networking/libp2p-substream" }
proto_builder = { path = "networking/proto_builder" }
sqlite_message_logger = { path = "networking/sqlite_message_logger" }
tari_base_node_client = { path = "clients/base_node_client" }
# avoid including default features so each crate can choose which ones to import
tari_bor = { version = "0.5", path = "dan_layer/tari_bor", default-features = false }
tari_rpc_state_sync = { path = "dan_layer/rpc_state_sync" }
tari_consensus = { path = "dan_layer/consensus" }
tari_dan_app_utilities = { path = "applications/tari_dan_app_utilities" }
tari_dan_common_types = { path = "dan_layer/common_types" }
tari_dan_engine = { path = "dan_layer/engine" }
tari_dan_storage = { path = "dan_layer/storage" }
tari_dan_storage_sqlite = { path = "dan_layer/storage_sqlite" }
tari_dan_wallet_daemon = { path = "applications/tari_dan_wallet_daemon" }
tari_dan_wallet_sdk = { path = "dan_layer/wallet/sdk" }
tari_dan_wallet_crypto = { path = "dan_layer/wallet/crypto" }
tari_dan_wallet_storage_sqlite = { path = "dan_layer/wallet/storage_sqlite" }
tari_dan_p2p = { path = "dan_layer/p2p" }
tari_engine_types = { path = "dan_layer/engine_types" }
tari_epoch_manager = { path = "dan_layer/epoch_manager" }
tari_indexer = { path = "applications/tari_indexer" }
tari_indexer_lib = { path = "dan_layer/indexer_lib" }
tari_indexer_client = { path = "clients/tari_indexer_client" }
tari_networking = { path = "networking/core" }
tari_rpc_framework = { path = "networking/rpc_framework" }
tari_rpc_macros = { path = "networking/rpc_macros" }
tari_state_store_sqlite = { path = "dan_layer/state_store_sqlite" }
tari_state_tree = { path = "dan_layer/state_tree" }
tari_swarm = { path = "networking/swarm" }
tari_template_abi = { version = "0.5", path = "dan_layer/template_abi" }
tari_template_builtin = { path = "dan_layer/template_builtin" }
tari_template_lib = { path = "dan_layer/template_lib" }
tari_template_macros = { version = "0.5", path = "dan_layer/template_macros" }
tari_template_test_tooling = { path = "dan_layer/template_test_tooling" }
tari_transaction = { path = "dan_layer/transaction" }
tari_transaction_manifest = { path = "dan_layer/transaction_manifest" }
tari_validator_node = { path = "applications/tari_validator_node" }
tari_validator_node_cli = { path = "applications/tari_validator_node_cli" }
tari_validator_node_client = { path = "clients/validator_node_client" }
tari_validator_node_rpc = { path = "dan_layer/validator_node_rpc" }
tari_wallet_daemon_client = { path = "clients/wallet_daemon_client" }
transaction_generator = { path = "utilities/transaction_generator" }

# external minotari/tari dependencies
minotari_app_grpc = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
minotari_app_utilities = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
minotari_console_wallet = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
minotari_node = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
minotari_node_grpc_client = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
minotari_wallet = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
minotari_wallet_grpc_client = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_common = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_common_types = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_hashing = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }

# avoid including default features so each crate can choose which ones to import
tari_core = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2", default-features = false }
tari_crypto = "0.20.0"
tari_key_manager = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_metrics = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_mmr = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_p2p = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_shutdown = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_storage = { git = "https://github.com/tari-project/tari.git", branch = "feature-dan2" }
tari_utilities = "0.7.0"

# third-party dependencies
anyhow = "1.0.75"
async-graphql = "5.0.7"
async-graphql-axum = "5.0.7"
async-semaphore = "1.2.0"
async-trait = "0.1.74"
asynchronous-codec = "0.7.0"
axum = "0.6"
axum-jrpc = "0.3.2"
base64 = "0.20.0"
bigdecimal = "0.4.1"
bincode = "2.0.0-rc.3"
bitflags = "2.4"
blake2 = "0.10.6"
borsh = "1.3"
bytes = "1.5"
cacache = "12.0.0"
cargo_metadata = "0.15.3"
cargo_toml = "0.11.5"
ciborium = { git = "https://github.com/enarx/ciborium.git", rev = "114614d2a61102eb2321c68e53799d1e6f087aef", default-features = false }
ciborium-io = { git = "https://github.com/enarx/ciborium.git", rev = "114614d2a61102eb2321c68e53799d1e6f087aef", default-features = false }
clap = "3.2.25"
chacha20poly1305 = "0.10.1"
chrono = "0.4.24"
config = "0.14.0"
convert_case = "0.6.0"
cucumber = "0.21.0"
d3ne = { git = "https://github.com/stringhandler/d3ne-rs.git", tag = "v0.8.0-pre.3" }
dashmap = "5.5.0"
diesel = { version = "2", default-features = false }
diesel_migrations = "2"
digest = "0.10"
dirs = "4.0.0"
env_logger = "0.10.0"
ethnum = "1.5.0"
fern = "0.6.2"
futures = "0.3.30"
futures-bounded = "0.2.3"
jfs = "0.7.1"
json5 = "0.4.1"
jsonwebtoken = "8.3.0"
hashbrown = { version = "0.13.2" }
hex = "0.4"
httpmock = "0.6.8"
humantime = "2.1.0"
humantime-serde = "1.1.1"
include_dir = "0.7.2"
indexmap = "2.2.6"
indoc = "1.0.6"
itertools = "0.11.0"
lazy_static = "1.4.0"
# Use Tari's libp2p fork that adds support for Schnorr-Ristretto
libp2p-identity = { git = "https://github.com/tari-project/rust-libp2p.git", rev = "0dccc6ca09651f6cc76ca08c58c31e34626d26c4" }
libp2p = { git = "https://github.com/tari-project/rust-libp2p.git", rev = "0dccc6ca09651f6cc76ca08c58c31e34626d26c4" }
#libp2p = "0.53.1"
#libp2p-identity = "0.2.8"
libsqlite3-sys = "0.25"
liquid = "0.26.4"
liquid-core = "0.26.4"
lmdb-zero = "0.4.4"
log = "0.4.20"
log4rs = "1.3"
mime_guess = "2.0.4"
mini-moka = "0.10.0"
multiaddr = { git = "https://github.com/tari-project/rust-libp2p.git", rev = "0dccc6ca09651f6cc76ca08c58c31e34626d26c4" }
#multiaddr = "0.18"
newtype-ops = "0.1.4"
once_cell = "1.18.0"
pin-project = "1.1"
proc-macro2 = "1.0.56"
prometheus = { version = "0.13.3", default-features = false }
prost = "0.12"
prost-build = "0.12"
prost-types = "0.9"
quick-protobuf = "0.8"
quick-protobuf-codec = "0.3.1"
quote = "1.0.7"
rand = "0.8.5"
rayon = "1.7.0"
reqwest = "0.11.16"
semver = "1.0"
serde = { version = "1.0", default-features = false }
serde_json = "1.0"
serde_with = "2.3"
sha2 = "0.10.8"
smallvec = "2.0.0-alpha.1"
std-semaphore = "0.1.0"
syn = "1.0.38"
tempfile = "3.3.0"
thiserror = "1.0.59"
time = "0.3.15"
tokio = { version = "1.34", default-features = false }
tokio-stream = "0.1.7"
tokio-util = "0.7.10"
tonic = "0.8.3"
tower = "0.4"
tower-http = { version = "0.4", default-features = false }
tower-layer = "0.3"
tracing = "0.1.40"
ts-rs = { version = "7.1", features = [
    "chrono-impl",
    "no-serde-warnings",
    "indexmap-impl",
] }
url = "2.4.1"
urlencoding = "2.1.3"
wasmer = "2.3.0"
wasmer-middlewares = "2.3.0"
webrtc = "0.9.0"
zeroize = "1"

# Shutdown when panicking so we can see the error, specifically for the wallet
[profile.release]
panic = 'abort'
# By default, Rust will wrap an integer in release mode instead of throwing the overflow error
# seen in debug mode. Panicking at this time is better than silently using the wrong value.
overflow-checks = true

## Make a copy of this code, uncomment and replace account and my-branch with the name of your fork and the branch you want to temporarily use
#[patch."https://github.com/tari-project/tari.git"]
#minotari_app_grpc = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#minotari_wallet_grpc_client= { git = "https://github.com/account/tari.git", branch = "my-branch" }
#minotari_node_grpc_client = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_common = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_common_types = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_comms = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_comms_rpc_macros = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_core = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_key_manager = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_mmr = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_p2p = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_shutdown = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_storage = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_script = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#minotari_wallet = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#minotari_console_wallet = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_service_framework = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_comms_dht = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#minotari_app_utilities = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#minotari_node = { git = "https://github.com/account/tari.git", branch = "my-branch" }
#tari_metrics = { git = "https://github.com/account/tari.git", branch = "my-branch" }
