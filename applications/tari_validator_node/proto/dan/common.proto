// Copyright 2022 The Tari Project
// SPDX-License-Identifier: BSD-3-Clause

syntax = "proto3";

package tari.dan.common;



message Node {
    bytes hash = 1;
    bytes parent = 2;
    uint32 height = 3;
    bool is_committed = 4;
}




message SignerSignature {
  bytes signer = 1;
  Signature signature = 2;
}

message Signature {
  bytes public_nonce = 1;
  bytes signature = 2;
}

message ThaumInput {
  enum InputType {
    STANDARD = 0;
    PEG_IN = 1;
  }
  InputType input_type = 1;
  // For standard
  bytes object_id = 2; // Synonymous with Output.hash on base layer
  // peg
  PegInInput peg_in = 3;
}

message PegInInput {
  bytes commitment = 1;
  uint64 burn_height = 2;
  MerkleProof burn_proof = 3;
  // A new spending key to prevent observers from stealing this peg in
  StealthAddress spending_key = 4;
  // Proof that the owner knows the commitment
  CommitmentSignature owner_proof = 5;
}

message ThaumOutput {
   bytes commitment = 1;
   StealthAddress owner = 2;
   bytes rangeproof =3;
}

message StealthAddress {
  bytes nonce = 1;
  bytes address = 2;
}

message CommitmentSignature {
  bytes public_nonce_commitment = 1;
  bytes signature_u = 2;
  bytes signature_v = 3;
}

message MerkleProof {
   repeated bytes branch = 1;
   uint32 depth = 2;
   uint32 path_bitmap = 3;
}

message Transaction{
  repeated ThaumInput inputs = 1;
  repeated ThaumOutput outputs = 2;
  repeated Instruction instructions = 3;
  uint32 max_instruction_outputs = 4;
  bytes balance_proof = 5;
  Signature signature = 6;
  uint64 fee = 7;
  bytes sender_public_key = 8;
}

message Instruction {
  enum InstructionType {
    FUNCTION = 0;
    METHOD = 1;
  }
  InstructionType instruction_type = 1;

  // common fields
  bytes package_address = 2;
  repeated bytes args = 3;

  // function only
  string template = 4;
  string function = 5;

  // method only
  bytes component_address = 6;
  string method = 7;
}
