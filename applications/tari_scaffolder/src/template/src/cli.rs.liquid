//  Copyright 2023 The Tari Project
//  SPDX-License-Identifier: BSD-3-Clause

use clap::Parser;
use clap::Subcommand;
use multiaddr::Multiaddr;
use crate::daemon_client::DaemonClient;
use tari_engine_types::parse_arg;

#[derive(Parser, Debug)]
#[clap(author, version, about, long_about = None)]
#[clap(propagate_version = true)]
pub(crate) struct Cli {
    #[clap(long, short = 'e', alias = "endpoint", env = "JRPC_ENDPOINT")]
    pub daemon_jrpc_endpoint: Option<String>,
    #[clap(long, short='t', alias= "token", env = "AUTH_TOKEN")]
    pub auth_token: Option<String>,
    #[clap(long, alias="template_address", default_value ="{{template_address}}")]
    pub template: String,
    #[clap(long, short='d')]
    pub dump_buckets: bool,
    #[clap(long)]
    pub dry_run: bool,
    #[clap(subcommand)]
    pub command: Command,
    #[clap(long, short='f', default_value="1000")]
    pub max_fee: u64,
    #[clap(long, short = 'a', default_value = "TestAccount_0")]
    pub default_account: String,
}

impl Cli {
    pub fn init() -> Self {
        Self::parse()
    }
}

#[derive(Debug, Subcommand, Clone)]
pub(crate) enum Command {
    Login(login::Command),
    {% for c in  commands %}
    {{ c.title }}({{ c.name }}::Command),
    {% endfor %}
}


pub mod login {
  use clap::Args;
  use crate::daemon_client::DaemonClient;
    use std::fs;

    #[derive(Debug, Args, Clone)]
    pub struct Command {

    }

    impl Command {
        pub async fn run(self, mut client: DaemonClient) {
           let token = client.login().await;
           let token = client.grant(token, "scaffold".to_string()).await;
           fs::write("token.data", token).unwrap();
        }
    }
}

{% for c in  commands %}
pub(crate) mod {{ c.name }} {
   use clap::Args;
   use crate::daemon_client::DaemonClient;
   use serde_json::json;
    use tari_engine_types::parse_arg;
    use tari_engine_types::instruction::Instruction;
    use tari_utilities::hex::Hex;
     use tari_utilities::hex::from_hex;
use tari_engine_types::TemplateAddress;
use tari_template_lib::prelude::ComponentAddress;
use tari_transaction::SubstateRequirement;
use tari_template_lib::args;
 use tari_template_lib::prelude::Amount;
 use tari_template_lib::prelude::ResourceAddress;
  use std::str::FromStr;




   #[derive(Debug, Args, Clone)]
   pub struct Command {
      {%  for  arg in c.args %}
      {% if arg.name != "self" %}
          {% if arg.arg_type != "Bucket" %}
       pub {{ arg.name}} : String,
           {% else %}
        pub {{ arg.name}}_amount : u64,
        pub {{ arg.name}}_resource: String,
        pub {{ arg.name}}_withdraw_from_component: String,
           {% endif %}
       {% else %}
       pub component_address: String,
       {% endif %}
      {% endfor %}
   }

   impl Command {

    {% if c.is_method %}

 pub async fn run(self, mut client: DaemonClient, dump_buckets: bool, is_dry_run: bool, fees: u64) {

       // let template_address= ;
        let method = "{{c.name}}".to_string();

    let mut instructions = vec![];
    {% if c.requires_buckets %}
    {% for bucket_arg in c.args %}
    {% if bucket_arg.arg_type == "Bucket" %}
       instructions.push(Instruction::CallMethod {
                component_address: ComponentAddress::from_hex(&self.{{bucket_arg.name}}_withdraw_from_component).unwrap(),
                method: "withdraw".to_string(),
                args: args![ResourceAddress::from_str(&self.{{ bucket_arg.name}}_resource).unwrap(), self.{{ bucket_arg.name}}_amount],
            });
  instructions.push(Instruction::PutLastInstructionOutputOnWorkspace {
            key: b"bucket_{{bucket_arg.name}}".to_vec(),
        });
     {% endif %}
     {% endfor %}
    {% endif %}
    instructions.push(
    Instruction::CallMethod {
                        component_address: ComponentAddress::from_hex(&self.component_address).unwrap(),
                        method,
                        args: args![
                            {%  for  arg in c.args %}
          {% if arg.name != "self" %}
            {% if arg.arg_type != "Bucket" %}
           parse_arg(&self.{{ arg.name}}).unwrap(),
           {% else %}
              Variable("bucket_{{arg.name}}"),
          {% endif %}
          {% endif %}
          {% endfor %}
                        ]
                   }
    );

            let transaction_id = client.submit_instructions(instructions, dump_buckets, is_dry_run, fees, vec![format!("component_{}", self.component_address).parse().unwrap()]).await;
     println!("submitted");
     let result = client.wait_for_transaction_result(transaction_id).await;
     println!("result: {:?}", result);

       }


    {% else %}
       pub async fn run(self, mut client: DaemonClient, template_address: TemplateAddress, dump_buckets: bool, fees: u64) {

       // let template_address= ;
        let  function = "{{c.name}}".to_string();



            let transaction_id = client.submit_instruction(Instruction::CallFunction {
                    template_address,
                    function,
                    args: vec![
                        {%  for  arg in c.args %}
      {% if arg.name != "self" %}
       parse_arg(&self.{{ arg.name}}).unwrap(),
      {% endif %}
      {% endfor %}
                    ]
           }, dump_buckets, false, fees, vec![]

            ).await;
           println!("submitted");
           let result = client.wait_for_transaction_result(transaction_id).await;
           println!("result: {:?}", result);

       }

       {% endif %}

   }
}
{% endfor %}

