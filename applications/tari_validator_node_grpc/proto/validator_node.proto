// Copyright 2021. The Tari Project
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
// following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
// disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
// following disclaimer in the documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
// products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
syntax = "proto3";

package tari.validator_node.rpc;

service ValidatorNode {
    rpc GetIdentity(GetIdentityRequest) returns (GetIdentityResponse);
    rpc SubmitTransaction(SubmitTransactionRequest) returns (SubmitTransactionResponse);
}

message GetIdentityRequest { }

message Arg {
    enum ArgType {
        LITERAL = 0;
        FROM_WORKSPACE = 1;
    }
    ArgType arg_type = 1;
    bytes data = 2;
}

message Instruction {
    enum InstructionType {
        FUNCTION = 0;
        METHOD = 1;
        PUT_OUTPUT_IN_WORKSPACE = 2;
    }
    InstructionType instruction_type = 1;

    // common fields
    bytes package_address = 2;
    repeated Arg args = 3;

    // function only
    string template = 4;
    string function = 5;

    // method only
    bytes component_address = 6;
    string method = 7;

    // PutLastInstructionOutputOnWorkspace
    bytes key = 8;
}

message Signature {
    bytes public_nonce = 1;
    bytes signature = 2;
}

message SubmitTransactionRequest{
    Transaction transaction = 1;
}

message SubmitTransactionResponse {
    string status = 1;
    bytes result = 2;
}

message GetIdentityResponse {
    bytes public_key = 1;
    string public_address = 2;
    bytes node_id = 3;
}

message InvokeReadMethodRequest{
    bytes contract_id = 1;
    uint32 template_id = 2;
    string method = 3;
    bytes args = 4;
    bytes sender = 5;
}

message InvokeReadMethodResponse {
    bytes result = 1;
    Authority authority = 2;
}

message Authority {
    bytes node_public_key =1;
    bytes signature = 2;
    bytes proxied_by = 3;
}

message InvokeMethodRequest{
    bytes contract_id = 1;
    uint32 template_id = 2;
    string method = 3;
    bytes args = 4;
    bytes sender = 5;
}

message InvokeMethodResponse {
    string status = 1;
    bytes result = 2;
}



message ThaumInput {
    enum InputType {
        STANDARD = 0;
        PEG_IN = 1;
    }
    InputType input_type = 1;
    // For standard
    bytes object_id = 2; // Synonymous with Output.hash on base layer
    // peg
    PegInInput peg_in = 3;
}

message PegInInput {
    bytes commitment = 1;
    uint64 burn_height = 2;
    MerkleProof burn_proof = 3;
    // A new spending key to prevent observers from stealing this peg in
    StealthAddress spending_key = 4;
    // Proof that the owner knows the commitment
    CommitmentSignature owner_proof = 5;
}

message ThaumOutput {
    bytes commitment = 1;
    StealthAddress owner = 2;
    bytes rangeproof =3;
}

message StealthAddress {
    bytes nonce = 1;
    bytes address = 2;
}

message CommitmentSignature {
    bytes public_nonce_commitment = 1;
    bytes signature_u = 2;
    bytes signature_v = 3;
}

message MerkleProof {
    repeated bytes branch = 1;
    uint32 depth = 2;
    uint32 path_bitmap = 3;
}

message Transaction{
    repeated ThaumInput inputs = 1;
    repeated ThaumOutput outputs = 2;
    repeated Instruction instructions = 3;
    uint32 max_instruction_outputs = 4;
    bytes balance_proof = 5;
    Signature signature = 6;
    uint64 fee = 7;
    bytes sender_public_key = 8;
}
