// Copyright 2022 The Tari Project
// SPDX-License-Identifier: BSD-3-Clause

syntax = "proto3";

package tari.dan.transaction;

import "common.proto";

message NewTransactionMessage {
  Transaction transaction = 1;
  repeated bytes output_shards = 2;
}

message CommitmentSignature {
  bytes public_nonce_commitment = 1;
  bytes signature_u = 2;
  bytes signature_v = 3;
}

message UnsignedTransaction {
  repeated Instruction fee_instructions = 1;
  repeated Instruction instructions = 2;
  repeated SubstateRequirement inputs = 3;
  tari.dan.common.Epoch min_epoch = 4;
  tari.dan.common.Epoch max_epoch = 5;
}

message Transaction {
  UnsignedTransaction transaction = 1;
  repeated tari.dan.common.SignatureAndPublicKey signatures = 2;
  repeated VersionedSubstateId filled_inputs = 3;
}

message Instruction {
  enum InstructionType {
    FUNCTION = 0;
    METHOD = 1;
    PUT_OUTPUT_IN_WORKSPACE = 2;
    EMIT_LOG = 3;
    CLAIM_BURN = 4;
    CLAIM_VALIDATOR_FEES = 5;
    DROP_ALL_PROOFS_IN_WORKSPACE = 6;
    CREATE_ACCOUNT = 7;
    ASSERT_BUCKET_CONTAINS = 8;
  }
  InstructionType instruction_type = 1;

  // common fields
  bytes template_address = 2;
  repeated Arg args = 3;

  // function only
  string function = 4;

  // method only
  bytes component_address = 5;
  string method = 6;

  // PutLastInstructionOutputOnWorkspace
  bytes key = 7;

  string log_level = 8;
  string log_message = 9;

  bytes claim_burn_commitment_address = 10;
  bytes claim_burn_range_proof = 11;
  CommitmentSignature claim_burn_proof_of_knowledge = 12;
  bytes claim_burn_public_key = 13;
  ConfidentialWithdrawProof claim_burn_withdraw_proof = 14;

  bytes claim_validator_fees_validator_public_key = 15;
  uint64 claim_validator_fees_epoch = 16;

  bytes create_account_public_key = 17;
  OwnerRule create_account_owner_rule = 18;
  AccessRules create_account_access_rules = 19;
  string create_account_workspace_bucket = 20;

  // AssertBucketContains
  bytes resource_address = 21;
  int64 min_amount = 22;
}


message Arg {
  enum ArgType {
    LITERAL = 0;
    FROM_WORKSPACE = 1;
  }
  ArgType arg_type = 1;
  bytes data = 2;
}

message SubstateRequirement {
  bytes substate_id = 1;
  OptionalVersion version = 2;
}

message OptionalVersion {
  uint32 version = 1;
}

message VersionedSubstateId {
  bytes substate_id = 1;
  uint32 version = 2;
}

message ConfidentialWithdrawProof {
  repeated bytes inputs = 1;
  uint64 input_revealed_amount = 2;
  ConfidentialOutputStatement output_proof = 3;
  bytes balance_proof = 4;
}

message ConfidentialOutputStatement {
  ConfidentialStatement output_statement = 1;
  ConfidentialStatement change_statement = 2;
  bytes range_proof = 3;
  uint64 output_revealed_amount = 4;
  uint64 change_revealed_amount = 5;
}

message ConfidentialStatement {
  bytes commitment = 1;
  bytes sender_public_nonce = 2;
  bytes encrypted_value = 3;
  uint64 minimum_value_promise = 4;
  ViewableBalanceProof viewable_balance_proof = 5;
}

message ViewableBalanceProof {
  bytes elgamal_encrypted = 1;
  bytes elgamal_public_nonce = 2;
  bytes c_prime = 3;
  bytes e_prime = 4;
  bytes r_prime = 5;
  bytes s_v = 6;
  bytes s_m = 7;
  bytes s_r = 8;
}

message OwnerRule {
  bytes encoded_owner_rule = 1;
}

message AccessRules {
  bytes encoded_access_rules = 1;
}